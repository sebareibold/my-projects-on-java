ALGORIRMO PRINCIPAL tpFinal()RETORNA VACIO
        
        ENTERO nroestadio, eleccion, posNroIngresado

        (*Creamos el arreglo de estadios*)
        estadio[] listEstadios <- crear nuevo estadio[100]

        (*Cargamos el arreglo de estadios*)
        cargaDeArreglosEstadios(listEstadios)

        REPETIR
            (*Desplegamos el Menu*)
            menuDesplegable()

            (*Ingresa la opcion eleguida*)
            LEER(eleccion)
            SEGUN(eleccion)HACER
                caso 1: ordenaminetoPorInsercionAsendente(listEstadios)
                caso 2: ordenaminetoPorInsercionDesendente(listEstadios);
                caso 3: ESCRIBIR("Ingrese el numero del estadio")
                  	LEER(nroestadio)
                   	posNroIngresado <- posicionEstadio(nroestadio, listEstadios)
                    	SI(posNroIngresado >= 0)ENTONCES
                        	ESCRIBIR("El nombre de estadio es: " + listEstadios[posNroIngresado].getNombre())
                        	ESCRIBIR("El nombre de estadio abreviado es: " + nombreSinVocales(listEstadios[posNroIngresado].getNombre()))
                    	SINO
                        	ESCRIBIR("Ingreso un numero de estadio incorrecto")
                    	FIN SI
                caso 4: imprimirArr(listEstadios)
                Por default: ESCRIBIR("Ingreso un numero que no es valido...")
            FIN SEGUN
        MIENTRAS(eleccion <5)
FIN AlGORITMO tpFinal 

(*Actividad 2, Modulo encargado de cargar el arreglo*)
MODULO cargaDeArreglosEstadios(estadio[] list, TEXTO ubicacion)RETORNA VACIO
        TEXTO linea <- null
        TEXTO [] arr <- new String[5]
        ENTERO pos <- 0;
        INTENTAR
            LECTORARCHIVO lectorArchivo <- crear LECTORARCHIVO ubicacion
            BUFERLECTURA bufferLectura <- crear BUFERLECTURA (lectorArchivo)

             MIENTRAS(linea <- bufferLectura.readLine()) != null AND pos< longitud(list)HACER
                System.out.println(linea);
                //Creamos un arreglo con las palabras de la linea. utilizando la funcion Split
                arr <- linea.split("\\|")
                //Creamos el objeto
                list[pos] <- new estadio(Integer.parseInt(arr[0]), arr[1], arr[2], aEntero(arr[3]), arr[4])
                //Incrementamos pos
                pos <- pos+1
            FIN MIENTRAS
            bufferLectura.close()
        ATRAPAR (FileNotFoundException ex) 
            ESCRIBIR(ex.getMessage() + "\nSignifica que el archivo del que queriamos leer no existe.")
        ATRAPAR (IOException ex) 
            ESCRIBIR("Error leyendo o escribiendo en algun archivo.")
        FIN INTENTAR
        ESCRIBIR("Carga finalizada.")
FIN MODULO cargaDeArreglosEstadios


    (*Actividad  3, Modulo Ordenamiento del arreglo de forma Ascendente *)
    MODULO ordenaminetoPorInsercionAsendente(estadio[] list)RETORNA VACIO
        (*Modulo ordenamiento por inserccion*)
        estadio temp
        ENTERO j, p
        PARA p DESDE 1 HASTA list.length PASO 1 HACER
            temp <- list[p]
            j <- p
            MIENTRAS ((j > 0) AND (temp.comparateTo(list[j - 1]) < 0)) HACER
                list[j] <- list[j - 1]
                j <- J-1
            FI MIENTRAS
            list[j] <- temp
        FIN PARA 
    FIN MODULO ordenaminetoPorInsercionAsendente

    (* Inciso 3, Modulo Ordenamiento del arreglo de forma Descendente *)
    MODULO ordenaminetoPorInsercionDesendente(estadio[] list)RETORNA VACIO
        (*Modulo ordenamiento por inserccion*)
        estadio temp
        ENTERO j, p
        PARA p DESDE 1 HASTA list.length PASO 1 HACER
            temp <- list[p]
            j <- p
            MIENTRAS ((j > 0) AND (temp.comparateTo(list[j - 1]) > 0)) HACER
                list[j] <- list[j - 1]
                j <- J-1
            FIN MIENTRAS
            list[j] <- temp
        FIN PARA
    FIN MODULO ordenaminetoPorInsercionDesendente

    (*Actividad 4, Modulo encargado de retornar el nombre sin vocales y con la primera letra mayuscula*)
    MODULO nombreSinVocales(TEXTO text)RETORNA TEXTO
        CARACTER c <- caracterEnPosicion(text,0)
        TEXTO textRet <- ""
        SI(text.length() = 1)ENTONCES
            (*Caso Base*)
            SI(NOT(esVocal(c)) AND c!=' ')ENTONCES
                textRet <- textRet + c
                textRet <- textRet.toUpperCase()
            FIN SI
        SINO
            (*Paso Recursivo*)
            SI(NOT(esVocal(c)) AND c!=' ')ENTONCES
                textRet <- textRet + c
                textRet <- aMayuscula(textRet)+ aMinuscula(nombreSinVocales(subcadena(text,1)))
            SINO
                textRet <- nombreSinVocales(subcadena(text,1)
            FIN SI
        FIN SI
        RETORNA textRet
    FIN MODULO

    (*Modulo Auxiliar esVocal*)
    MODULO esVocal(CARACTER c)RETORNA LOGICO
        RETORNA (c='a' OR c='e' OR c='i' OR c='o' OR c='u' OR c='A' OR c='E' OR c='I' OR c='O' OR c='U');
    FIN MODULO

    (*Modulo Auxiliar Imprimir los arreglos*)
    MODULO imprimirArr(estadio[] arr)RETORNA VACIO
	ENTERO pos
        PARA pos DESDE 0 HASTA arr.length PASO 1 HACER
            ESCRIBIR(arr[pos].toString())
        FIN PARA
    FIN MODULO

    (*Modulo Auxiliar Posicion de estadio*)
    MODULO posicionEstadio(ENTERO numero, estadio[] arr)RETORNA ENTERO
        LOGICO encontrado <- false
        ENTERO posRetornar <- (-1), pos <- 0
        MIENTRAS(NOT(encontrado) AND pos < arr.length)HACER
            SI(numero=arr[pos].getNumero())ENTONCES
                encontrado <- true
                posRetornar <- pos
            FIN SI
            pos <- pos + 1
        FIN MIENTRAS
        RETORNA posRetornar
    FIN MODULO

    (*Modulo Auxiliar Menu*)
    MODULO menuDesplegable()RETORNA VACIO
        ESCRIBIR("Ingrese el valor:")
        ESCRIBIR(" - 1 Si desea ordenar el arreglo de forma Ascendente (Metodo Utilizado Inserccion)")
        ESCRIBIR(" - 2 Si desea ordenar el arreglo de forma Descendente (Metodo Utilizado Inserccion)")
        ESCRIBIR(" - 3 Si desea visualizar el nombre de un estadio de forma natural y de forma abreviada")
        ESCRIBIR(" - 4 Si desea visualizar el arreglo")
        ESCRIBIR(" - 5 o mas, Si desea terminar el algoritmo")
    FIN MODULO
